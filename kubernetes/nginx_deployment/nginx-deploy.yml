# k8 works works with api versions to declare the resources
# we have to declare the api version and the kind of service/component
# services: deployment, service, pods, replicasets, crobjob, autoscalinggroup
# kubectl get service-name

apiVersion: apps/v1   # which api to use for deployment
kind: Deployment   # want to create Deployment service

# what would you like to call it 
metadata:
  name: nginx-deploy   # naming the deployment
spec:
  selector:
    matchLabels:
      app: nginx   # look for this label to match with k8 service

# create a replica set of this with 2 instances/pods
replicas: 3

# template to use it's label for k8 service to launch in the browser
template: 
  metadata:
    labels:
      app: nginx   # this label connects to the service or any other k8 components

# define the container spec
  spec:
    containers:
    - name: nginx
      image: ahskhan/fahimtq1/fahim-profile:latest
      ports: 
      - containerPort: 80